■ 開発
#ウォーターフォール開発
    ウォーターフォールという名は文字通り
    「水が流れ落ちる」様に工程が進むことから名付けられており、
    上流工程から下流工程まで流れる様に開発が行われる。
    各工程の終了時に成果物を作成することで、品質の確保を図る。
    要件定義→基本設計→詳細設計→製造（プログラミング）→
    単体テスト→統合テスト→総合テスト
    上記のようにスタート時に要件を定義し、詳細を落とし込んでいくので、
    全体的な計画（進捗管理、予算の見積もり）を立てやすい。
    ただ、進行中に仕様変更が生じた時の負担が大きい。

#アジャイル開発
    アジャイルとは「素早い」「機敏」という意味。
    1ヶ月間の短期間で開発・提供を行うため、ユーザーに素早く機能の提供ができ、
    途中で仕様の変更や追加があった際にも柔軟に対応できる開発手法。
    デメリットは全体的な計画（進捗管理、予算の見積もり）が難しい。

#マイグレーション
    「移動」「移転」などという意味。
    ソフトウェアやハードウェア、システム、データ、開発言語などを
    別のプラットフォームに移行したり、新しいシステムに切り替えすることを
    意味する。元のシステムからデータなどを抽出して移動させるため、
    専用のツールを使う事が多い。（ヒューマンエラーを防ぐため）
   
#デグレーション
    デグレやデグレートとも呼ぶ。
    直したはずのバグ（不具合）が復活していたり、前になかったはずの
    バグが発生したり、実装したはずの機能がなかったりなど品質低下の
    事象のこと。

#デプロイ
    「配置する」「配備する」「展開する」という意味
    開発したアプリケーションをサーバーにアップロードして本番環境で動作させるなど、開発した機能やサービスを利用できる状態にする作業のこと。

#コンフリクト
    「競合」「衝突」「対立」などという意味。
    複数のプログラムが同じデータやファイルを同じタイミングで使うときに
    発生する競合状態のこと。

#環境
    コンピューターやソフト、機材などをまとめた場所のこと。

#開発環境（ローカル）
    開発をするためのものが揃った場所（環境）のこと。

#検証環境（ステージング）
    ソフトウェア開発などの最終段階で、実際の運用環境と変わらない環境のこと

#本番環境
    ソフトウェア開発などで完成した製品を実際に稼働させるための運用環境のこと

#設計書／仕様書
    ソフトウェアなどを開発する際に必要な性能、要件などをまとめた文書のこと

#要件定義
    ソフトウェアやシステムを開発する際に顧客が求めている機能や性能などを明確にしていく作業のこと（顧客のやりたいことをまとめる作業）。開発工程の一番最初になる。

#基本設計書
    要件定義後に実際に作るべきシステムの全体像や概要をまとめた書類のこと。

#詳細設計書
    基本設計をもとにして実際のプログラムが作れるようにシステムの詳細をまとめた書類のこと（プログラムを作るときに見る資料）。

#テスト
    テストは品質の担保のため実施する。
    要件定義の通りに機能するかどうか、テスト工程毎にどの機能をどういった技法で
    確認するか決める必要がある（テスト仕様）。

#単体テスト（UT）
    システム開発で、モジュール（部品）が意図したとおりに動作するか確認する作業。
    
#結合テスト（CT／IT）
    単体テスト後にモジュール同士を結合して、意図した通りに動作するかを確認する作業。

#総合テスト（ST）
    本番同様の動作環境で要件定義通りに動作するかを確認する作業。

#エビデンス／証跡
    システム開発などでシステムが発注通りに動作していることを示すデータや書類などの証拠のこと。

#データパッチ
    ソフトに変更を加えるために用意された、後付けのプログラムのこと。

#Access
    「到達する」「利用可能にする」などという意味。
    機器やソフトウェア、システム、情報などを利用可能にすることをアクセスという。
    特にPCのストレージ内に保存されたデータを読み出したり、上書きや削除などを行うことをアクセスということが多い。

#マクロ
    事前に操作手順などを記録しておき、その記録した内容をまとめて実行できるようにする機能のこと。Excelなどについている。

#VBA
    マイクロソフト社が開発したマイクロソフト製品で動くプログラムを作るためのプログラミング言語のこと。

#GAS（Google Apps Script）
    Googleが提供しているプログラミング言語（スクリプト言語）。
    無料で使用でき、環境構築の必要がない。
    Googleが提供している様々なサービスやツールを操作できる。

#API
    アプリケーションプログラミングインターフェースの略。
    コンピュータプログラム（ソフトウェア）の機能や管理するデータなどを、外部の他のプログラムから呼び出して利用するための手順やデータ形式などを定めた規約のこと。

#WEB API
    WEBベースで提供されているAPIのこと。
    HTTPプロトコルを経由してネットワーク越しに呼び出すアプリケーション間、システム間のインターフェースのこと。

#REST API
    Web APIの代表的な実装方式で、
    REST（REpresentational State Transfer）の原則に則って作られたAPI。
    以下①〜④が原則。
    ①HTTPのメソッド（命令）でデータ操作種別（CRUD）を表す
    POSTメソッドであれば作成（Create）、GETメソッドであれば参照（Reference）、PUT／PATCHメソッドであれば更新（Update）、DELETEメソッドであれば削除（Delete）を表す
    ②ステートレスにする
    前回のAPIコール結果にかかわらず同じ値を戻す。例えば合計1000件のデータが存在し、1回目のAPIコールで100件まで取得したとしても、その状態は考慮せず、2回目のAPIコールでも同じ100件を戻すという挙動
    ③URIで操作対象のリソースを判別可能にする
    RESTでは、APIを介して操作する対象を「リソース」と呼ぶ。例えば「ユーザー」というリソースを表すために「users」というリソース名を付与することがある。ユーザーIDが「1000」のユーザー情報を取得したい場合、下記のようなURIフォーマットでURIを生成し、操作可能とする
    URIフォーマット：https://example.com/users/:user_id
    生成されたURI：https//example.com/users/1000
    ④レスポンスとしてXMLもしくはJSONで操作結果を戻す
    適切にデータ操作できた場合、データ記述言語のXMLもしくはJSONでデータ操作結果を記述し、HTTPのレスポンスボディーに含め、APIコール元に戻す

#SOAP
    Web APIの代表的な実装方式で、XMLを利用したWebサービス連携プロトコルのこと。
    XMLで記述された「SOAPメッセージ」と呼ばれるデータをやりとりすることで、メッセージを交換する。WSDL（Web Services Description Language）というWebサービスインタフェース記述言語でSOAPメッセージの構造を定義でき、このWSDLによる定義ファイルをAPI利用者、API提供者双方で保持することで、独自に定義した構造のSOAPメッセージをやりとりすることが可能となる。
    最近はRESTが主流になっている。

#Ajax
    javaScriptとXML（最近ではjson）を使って非同期にサーバーとの通信を行う事。WEBページで一部だけ更新したい場合に、ブラウザを読み込みせずともその部分だけが更新される仕組み

#XML
    Extensible Markup Languageの略。
    文書やデータの意味や構造を記述するためのマークアップ言語の一つ（HTMLと似たようなもの)。HTMLが人間に対して分かりやすい言語なのに対し、XMLはデータ記述用の言語のため、マシンに情報を分かり易く、効率的に伝えることができる。
    Ajaxなどにも利用される。

#JSON
    JavaScript Object Notationの略。
    XMLより人間にとって読み書きが容易で、記述量が少ないため読み込みが早いデータ記述用の言語。
    JavaScript のオブジェクトで構成されているため、そのまま JavaScript で記述したプログラムで扱うことができる。
    Ajaxなどにも利用される。

#ステータスコード
    HTTPステータスコード（HTTP Status Code）とも呼ばれる、HTMLを表示する前にブラウザが受信する3桁の番号のこと。番号は100-510までの間で割り振られていて、
    各数値にはそれぞれ意味が付与されている。この3桁の数値を「HTMLを受信する前に」受信することで、ブラウザは正しい処理ができるようになる。
    例えばwebサイトにアクセスするときにWebサーバーから「200」が返ってくる。この200はOKという意味なので、そのままサイトが見れる。

#クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
    オリジンとはスキーム(http://など)、ホスト(www.exsample.comなど)、ポート(80など。省略可能）の組み合わせ。
    CORS（オリジン間リソース共有）とはあるオリジンで動いている Web アプリケーションに対して、別のオリジンのサーバーへのアクセスをオリジン間 HTTP リクエストによって許可できる仕組み。

#バリデーション
    入力内容や記述内容が要件を満たしているか、妥当性を確認すること。
    プログラムのバリデーションといった場合、記述に用いた言語の文法や、そのプログラムに要求される仕様（書の記述）に則って正しく記述されているかを検証することを表す。

#データ連携
    アプリケーションやシステムがそれぞれ異なるデータを垣根を超えて共有、活用すること。また、そのための技術・プロセスのこと。

#Daemon
    UNIX系OSでメインメモリに常駐して特定の機能を提供するプログラム。
    強制終了など特殊な場合をのぞいて基本的に利用者が直に操作することはない。
    httpdやftpdなど末尾に「d」がついていたら恐らくデーモン。
    例えばメーラーデーモンの場合、存在しないアドレスにメールを送信すると、
    「MAILER-DAEMON」という名前で送れなかったと知らせてくれる。

#CRON
    デーモンの一種で、利用者の設定したスケジュールに従って指定されたプログラムを定期的に起動してくれるもの。
    例えばCRONに対して「いつにこのプログラムを動かせ」という指示をしたいときはcrontabというコマンドを使用する。
    
#バッチ
    一回分の処理という意味。
    必要な指示をあらかじめすべて与えておき、これを一挙に処理すること。

#ログ
    起こった出来事についての情報を一定の形式で時系列に記録・蓄積したデータのこと。
    エラーや障害の発生など不具合の原因調査などのためによく参照される。

#CSV
    Comma-Separated Valuesの略。
    項目間を「,（カンマ）」で区切る形式のこと。
    また、表のように項目が縦横に並んだデータを記述することができ、
    表計算ソフトやデータベースソフトなど多くのソフトウェアが標準で対応しており、
    システム間のデータ交換などで昔から広く用いられている。

#TSV
    Tab-Separated Valuesの略。
    項目間が「タブ」で区切られている書式のこと。
    縦横に規則正しく項目が並んだ表形式のデータを保存するのによく用いられるもので、
    表計算ソフトやデータベースソフトの多くが標準で対応している。
    CSVは項目中に記号文字（カンマなど）が含まれる場合の取り扱いに注意が必要だが、TSVはタブが制御文字のため、より簡易な方法で扱える。

#プルリクエスト（マージリクエスト）
    Githubが最初に提供した機能で、開発者がローカルリポジトリでの変更を
    他の開発者に通知する機能（プルリクエスト）。他の開発者にコードをレビュー
    してもらったあとにマージ （結合）することでバグが起こりにくくなる。

■ チケット管理ツール
#asana
    Facebookの共同創業者のダスティン・モスコヴィッツと元Googleエンジニアのジャスティン・ローゼンシュタインが立ち上げたタスク管理ツール。
    仕事の生産性を上げるために必要な機能が充実しており、シンプルな作りが評判で、
    チュートリアル も充実していることからITツール初心者からも好まれている。
    1番の特徴は2種のタスク管理のレイアウトを選べること。
    チェックリストを縦に一覧化し、タスクが終了したらチェックボックスを押して消化するため、未着手のタスクを一目で確認できる「リスト形式」。
    「新規」「実行中」「完了」などタスクをステータス毎に管理できるため、複雑な工程になっても進捗状況を可視化できる「カンバン形式」。

#Backlog
    ヌーラボが提供しているSaaS（Software as a Service）型のプロジェクト管理ツール。
    2018年には利用者数が100万人を突破するなど日本国内のプロジェクト管理ツールとしては最大規模のサービス。
    大きな特徴はシンプルで分かりやすいUIで、非エンジニアであってもプロジェクト管理がしやすくなる操作性を目指している。
    近年では営業・総務など一般的なタスク管理にも採用されており、非IT分野への進出を後押ししている。

#Jooto
    2014年にシンガポール在住の日本人が立ち上げたクラウド型のタスク管理ツール。
    仕事や作業を入力した付箋のようなタスクカードをドラッグ&ドロップで動かしタスク管理をする「カンバン方式」のため、シンプルかつ直感的操作が可能。
    ドラッグアンドドロップでタスク管理を行う機能を初めて提供した。

#Readmine
    チケットという機能を用いてプロジェクト管理ができるオープンソースソフトウェア。
    自分でサーバーにダウンロードして無料で利用できる。

#Trello
    ニューヨークのFog Creek Softwareという会社が2010年ごろ社内プロジェクトとして開発。その最大の特長は、タスクをカードのように扱う操作性。
    外部アプリケーション連携機能を持つため、「Slack」や「Chatwork」に加え、Drobpxなどのオンラインストレージとも連携可能。簡単で見やすいインターフェースと優れた機能性を併せもつプロジェクト管理ツールのため、2,000万人以上の導入実績がある。

■ バージョン管理
#集中型
    SVNは集中型（クライアント・サーバ型）のバージョン管理システム。
    SVNの場合は、ソフトウェア1つにつき、1つリポジトリを使う。開発に参加するメンバーは共有するリポジトリからソースコードを持ってきて編集し、終わったら、リポジトリに反映させる。
   リポジトリが置かれたサーバーに接続できない場合、最新のソースコードの取得やファイル編集の反映ができない。

#分散型
    Gitは分散型のバージョン管理システム。
    リポジトリを複数もつことができ、開発の形態や規模に合わせてソースコードの管理ができる。リポジトリが複数用意できるため、分散型と呼ばれている。
    リモートリポジトリをサーバー上に置き、開発者それぞれがローカルリポジトリを使って作業を行い、ある程度作業が終わったらリモートリポジトリに反映するといった使い方ができる。

#Github
    その名の通り、「Git」の「ハブ：拠点・中心・集まり」。
    Gitの仕組みを利用して、世界中の人々が自分の作品を保存・公開できるようにしたウェブサービスの名称。
    Gitは基本的にコマンドラインツールのため、操作がしにくいが、Githubはグラフィカルに扱うことができる。また、タスク管理ツールなどコレボレーションのための機能も充実している。
    GitHubのメリットとしてはまず、「フォーク」という機能が挙げられる。
    誰かのリポジトリをほかの人がコピーすることによって、オリジナルのものに対する編集アクセス権がなくても、それを自分のところで改変することができる。
    次のメリットは「プルリクエスト」
    自分の行った変更点を反映したい場合に他の開発者に通知できる。
    最後が「マージ 」。プルリクエスト後にコードをレビューしてもらい、
    問題なければボタンをクリックするだけで変更点を結合（マージ ）することができる。

#Backlog
    チケット管理ツールだけでなく、バージョン管理システムのGitやSubversionのリポジトリ機能を備えている。ソースコードやコミット履歴をプロジェクトに紐づけて管理して、チームメンバーに共有できる。

#SourceTree
    オーストラリアのAtlassian社が提供している無料のGitクライアントソフトウェア。
    Githubと同様にグラフィカルなインターフェースを備えているため、操作が簡単。

#Tortoise SVN
    Subversion (SVN)のクライアントで、バージョン管理用のwindowsアプリ。Subversionのコマンドを実行する必要がなく、直観的に、簡単に使えることが特徴。

#Git Flow
    Gitの機能であるブランチを活用したGitの開発手法（ツール名）。
    複数人による長期の開発をおこなう場合、運用ルールを決めずにGitを採用してしまうと、コンフリクトが頻繁に起こったりマージのミスが発生したりと、問題が起こる可能性がある。Git Flowは役割ごとに5つのブランチを使い分け、そういった問題を回避する。
    feature……開発をおこなうためのブランチで、個々の機能の実装やバグの解決をおこなう
    develop……開発をおこなうためのブランチ
    release……リリース前に準備、微調整をおこなうブランチ
    master……リリースしたデータを置いておくブランチ
    hot-fix……リリースされているデータに、緊急の修正対応をするためのブランチ

#master
    Gitに最初にコミットした時に作られるブランチ。
    Git Flowではリリース済のソースコードを管理するブランチ。

#release
    Git Flowではリリース前に準備を行うブランチ。マージ 先はmasterとdevelop。

#develop
    Git Flowでは開発中のソースコードを管理するブランチ。

#feature
    Git Flowでは機能実装やバグ修正などを行うブランチ。マージ 先はdevelop。

■ FW／ライブラリ
#FW
    フレームワークの略。
    システム開発を楽に行えるように用意された、プログラムなどの雛形のようなもの（便利な機能がつまったツール）。

#Spring Framework
    JavaのWEBフレームワークで、WEBアプリを作ることができる。
    Javaは大規模なアプリ開発が多く、途中で変更や修正が入ることがある。
    そのため、変更時にかなりの時間を費やす必要があるが、
    DI(Dependency Injection）と呼ばれる仕組みのおかげで依存性のあるプログラム（固定の変数やインスタンスなどがあるプログラム）を外部から取り入れることで1つ1つのプログラムを独立させやすくなった。
    そのため、変更する場合も最低限の変更で済む。
    他に「Spring MVC Test」という専用のテストプログラム を使って結合テストを行い、バグの混入を最小限に抑える事ができる。
    特徴は拡張性と保守性、再利用性が高いこと。

#Struts
    JavaのWEBフレームワークの一つ。
    MVC（Model-View-Controller）と呼ばれるアーキテクチャによって、Java Servlet APIやJSP（JavaServer Pages）などを用いたサーバーサイドのWebアプリケーションを構築することができる。
    2001年から開発され、フレームワークの中でも歴史が古く、Javaでアプリを作成する際にほとんど使用されている。
    生産性が高く、独自のタグライブラリのおかげで記述レベルの差異が出ず、質の良いアプリ制作ができる。

#JSF（Java Server Faces）
    JavaのWEBフレームワークの一つ。
    「Faces」と付く通り、ユーザーに文字入力や回答を選択するボックスなどのユーザーインターフェースを作ることに特化している。
    たとえば「閲覧者はどんなことに興味があるのか」「どんな年代の人がこのページを読んでいるのか」などが分かるコードを組むことができる。
    JSFのメリットはとにかく扱いが簡単なこと。
    ツール化していてセットのために新しい言語を覚える必要もなく、普段使い慣れた言語から離れることがないため、プログラマーへの負担が軽減される。

#ライブラリ
    ある特定の機能を持ったコンピュータプログラムを他のプログラムから呼び出して利用できるように部品化し、そのようなプログラム部品を複数集めて一つのファイルに収納したものをライブラリという。

#Bootstrap
    WEB製作者の作業を楽にする目的で作られたWEBサイト構築用のフレームワークのこと。テンプレートを使用する事で、デザインが苦手なひとでも簡単に見栄えの良いサイトが作れる。また、レスポンシブデザインのおかげで端末毎に表示する見た目を変えれるため、開発効率が良い。

#Flyway
    データベースマイグレーションツールのこと。
    Flyway を使うことで、データベースの状態をバージョン管理できるようになる。

#Jackson
    Javaで使えるJSONライブラリのこと。
    JSON形式の文字列をJavaのオブジェクトに直接マッピングしたり、逆にJavaオブジェクトをJSON文字列に変換できたりする。
    TwitterやFacebook、GoogleなどのWEBサービスとはJSONでやりとりするため、
    Jsonを使えるようになるとできる事の幅が広がる。

#jQuery
    JavaScriptでできることを、より簡単な記法で実現できように設計された代表的なJavaScriptライブラリ。
    jQueryの大きな特徴は以下の3つ。
    ブラウザの違いを意識せずに済む。
    HTMLのDOM操作が簡単にできる。
    Ajax処理が簡単に記述できる。

#Junit
    Javaで書かれたプログラムのテストを自動化するためのツール。
    作成したクラスに対して作成したJunitのコードからテスト対象クラスのメソッドを呼び出して動作をテストできる。
    一度作成したテストコードは流用が効くため、毎回テストコードを作成する手法に比べてテストにかかる工数を削減することができる。

#Log4j
    Apache log4j（アパッチ ログフォージェイ）は、 オープンソースのJavaプログラム用ロギングユーティリティ（API）のこと。ロギングユーティリティとは、プログラム内部から、デバッグ情報やエラー情報などのログデータを、コンソール、ファイル、その他ログサーバなどヘ出力する機能。
    「Apache log4j」は、「log4j」と略して称されることが多い。

#Lombok
    読みは、「ロンボック」もしくは「ロンボク」。
    Java特有の冗長なコードを簡潔にしてくれるオープンソースのライブラリのこと。
    メンバ変数を読み書きするだけのgetterメソッドやsetterメソッドなどのボイラープレートコード（自明だが省略できないお決まりのコード断片）をアノテーションを指定するだけで省略することができる。
    圧倒的にコードの見た目がスッキリするので生産性も劇的に上がる。

#ORM
    Object-relational mappingの略。
    オブジェクト指向とリレーショナルデータベースの考え方を上手く変換してくれる仕組み。SQLを書かずデータベースからデータを取得するなど、以下の機能がある。
    データベースからデータを取得する
    取得したデータをオブジェクト化する
    データの更新・変更などをデータベースに格納する

■ 連絡ツール
#ChatWork
    Chatwork株式会社が提供する、ビジネスコミュニケーションに特化したチャットツールで、スマートフォン版アプリもあり、外出中でも簡単に確認できる便利なツールとして、269,000社以上の企業に導入している。
    強みはタスク管理で、チャットを確認しながらタスクを登録したり、確認したりできる。
    
#Slack
    アメリカのSlack Technology社が開発し運営しているSaaS型のビジネスチャットツール。SlackはWebブラウザから利用する方法と、アプリを利用する方法がある。なかでもアプリは、WindowsやmacOSだけでなく、デスクトップアプリはLinux、モバイルアプリはiOS、Android、Windows Phoneの環境に対応したアプリが用意されていることも、幅広い企業で利用が進む一因となっている。
    Githubなど様々な外部Webサービスと連携ができる。

#IP Messenger
    LAN 用メッセンジャーソフト。同じネットワーク内のメンバーを自動認識し、簡単にクライアント同士がリアルタイムに情報交換できるソフトウェア。
    同じ仕組みは、スマホやパソコンが無線LANルーターを見つける目的など、多くのネットワークシステムで活用されている。

■ Java
#Javadoc
    Java言語のソースコードに一定の書式でコメントを記述することで、クラスの説明やメソッドの呼び出し方などの仕様をHTMLなどの文書形式でまとめてくれる仕組み。また、そのためのコメントの書式。

#アノテーション
    注釈という意味。
    Javaのコード上では”@(アットマーク)”からはじまり、コードでは表現しきれない情報を、補足としてつけ加えれる。
    実際にコードを書くところにルールを書いておくことで、ミスを避けることが可能です。   
    具体的に記述する場所は
    クラス
    インターフェース
    メソッド
    メンバ変数
    メソッド引数など。

#メモリ管理
    メモリ領域にオブジェクトをどのように割り当てるかということ。
    メモリ管理システムは、新しいオブジェクトのための空き領域を探す役割と、古いオブジェクトにガベージ・コレクションを行って新しいオブジェクトのための空き領域を作成する役割を果たす。

#ヒープ
    JVM上で「ユーザが作ったプログラムが利用するメモリ領域(1000101001など）」のこと。

#GC
    ガベージ・コレクションのこと。
    ヒープに格納されているオブジェクトのうち、不要となったものを削除する。

#GoF
    コンピュータ関連におけるGang of Four（ギャング・オブ・フォー、GoF）とは、書籍『オブジェクト指向における再利用のためのデザインパターン』の著者である、エーリヒ・ガンマ、リチャード・ヘルム、ラルフ・ジョンソン、ジョン・ブリシディースの4人を指す。
    彼らは、その書籍の中で23種類のパターンを取り上げた。
    GoFによるデザインパターン（GoFパターン）は、多数のソフトウェアパターンの中で最も広く知られている。

#デザインパターン
    ソフトウェア開発におけるデザインパターン（型紙（かたがみ）とは、過去のソフトウェア設計者が発見し編み出した設計ノウハウを蓄積し、名前をつけ、再利用しやすいように特定の規約に従ってカタログ化したもの。

■ その他
#オブジェクト指向
    現実世界の人や出来事をクラスに置き換え、現実に似せて作り、動かすこと

#バッチ処理
    一定量、一定時間に達したらまとめて一括して処理を行うことをバッチ処理という。

#コンパイル
    ソースコード（人間が理解できる言葉で書いたプログラム）をコンピューターが理解できる言語に翻訳すること。

#カバレッジ
    全体に対して、どれくらいカバーしたかの割合。
    システムテストの場合は、どれくらい確認が終わっているかの割合のこと。

#プラットホーム
    ある機器やソフトウェアを動作させるのに必要な、基盤となる装置やソフトウェア、サービスなどのこと。